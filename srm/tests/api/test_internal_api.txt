# coding=utf-8
import json
import logging
import os
# from parameterized import parameterized, param
import pytest
from assertpy import assert_that

# from .. import models as m
from . import APITestCase

__author__ = 'Huu'
_logger = logging.getLogger(__name__)


class TestInternalApi(APITestCase):
    def url(self):
        return '/api/v2/internals/product_uom/1'

    def method(self):
        return 'PUT'

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/purchaseOrderReceipt/",
                {
                    "payload": "{\"warehouse_code\": \"CP08\", \"external_ref\": \"NCC190500495\", \"__ts\": \"2019-05-20 07:37:25.768916\", \"scheduled_date\": \"2019-05-20 07:17:20\", \"priority\": \"1\", \"printed\": false, \"backorder\": null, \"owner\": null, \"id\": 293607, \"destination\": \"0801\", \"create_by\": \"admin\", \"external_warehouse\": \"eton\", \"moves\": [{\"code\": \"1402112\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 20.0, \"barcode\": \"1402112\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1402112\", \"qty_done\": 0.0, \"purchase_line_id\": 138511, \"ordered_qty\": 10.0, \"id\": 941010, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 81, \"tax_code\": \"10\"}, {\"code\": \"1201345\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 18.0, \"barcode\": \"1201345\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1201345\", \"qty_done\": 0.0, \"purchase_line_id\": 138512, \"ordered_qty\": 10.0, \"id\": 941011, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 81, \"tax_code\": \"10\"}, {\"code\": \"1600151\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 12.0, \"barcode\": null, \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1600151\", \"qty_done\": 0.0, \"purchase_line_id\": 138513, \"ordered_qty\": 10.0, \"id\": 941012, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 72, \"tax_code\": \"10\"}, {\"code\": \"1600388\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 12.0, \"barcode\": \"1600388\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1600388\", \"qty_done\": 0.0, \"purchase_line_id\": 138514, \"ordered_qty\": 10.0, \"id\": 941013, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 72, \"tax_code\": \"10\"}], \"deadline\": null, \"branch\": \"CP08\", \"create_date\": \"2019-05-20 07:37:21\", \"note\": null, \"related_po_ids\": [54851], \"picking_type\": \"incoming\", \"state\": \"assigned\", \"origin\": \"NCC190500495\", \"contact\": {\"phone\": \"0134567892\", \"name\": \"Administrator\"}, \"is_locked\": true, \"creation_date\": \"2019-05-20 07:17:20\", \"transfer_date\": null, \"name\": \"CP08/IN/1900069\", \"source\": \"SUPP\", \"last_updated_by\": \"admin\", \"partner\": \"00066\", \"last_updated_on\": \"2019-05-20 07:37:21\", \"move_type\": \"direct\", \"__sign\": \"216a2c9f84b0d24486d28d5ff81610b5ee6c4316\"}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def ttest_poReceipt_post_success_done(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload,method='post')
        assert rv.status_code == 200
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)



    @pytest.mark.parametrize(('url', 'payload','fake_odoo_response_data', 'expected'), [
        (
                "/api/v2/internals/purchaseOrderReceipt/",
                {
                    "payload": "{\"warehouse_code\": \"CP08\", \"external_ref\": \"NCC190500495\", \"__ts\": \"2019-05-20 07:37:25.768916\", \"scheduled_date\": \"2019-05-20 07:17:20\", \"priority\": \"1\", \"printed\": false, \"backorder\": null, \"owner\": null, \"id\": 293607, \"destination\": \"0801\", \"create_by\": \"admin\", \"external_warehouse\": \"eton\", \"moves\": [{\"code\": \"1402112\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 20.0, \"barcode\": \"1402112\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1402112\", \"qty_done\": 0.0, \"purchase_line_id\": 138511, \"ordered_qty\": 10.0, \"id\": 941010, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 81, \"tax_code\": \"10\"}, {\"code\": \"1201345\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 18.0, \"barcode\": \"1201345\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1201345\", \"qty_done\": 0.0, \"purchase_line_id\": 138512, \"ordered_qty\": 10.0, \"id\": 941011, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 81, \"tax_code\": \"10\"}, {\"code\": \"1600151\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 12.0, \"barcode\": null, \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1600151\", \"qty_done\": 0.0, \"purchase_line_id\": 138513, \"ordered_qty\": 10.0, \"id\": 941012, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 72, \"tax_code\": \"10\"}, {\"code\": \"1600388\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 12.0, \"barcode\": \"1600388\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1600388\", \"qty_done\": 0.0, \"purchase_line_id\": 138514, \"ordered_qty\": 10.0, \"id\": 941013, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 72, \"tax_code\": \"10\"}], \"deadline\": null, \"branch\": \"CP08\", \"create_date\": \"2019-05-20 07:37:21\", \"note\": null, \"related_po_ids\": [54851], \"picking_type\": \"incoming\", \"state\": \"assigned\", \"origin\": \"NCC190500495\", \"contact\": {\"phone\": \"0134567892\", \"name\": \"Administrator\"}, \"is_locked\": true, \"creation_date\": \"2019-05-20 07:17:20\", \"transfer_date\": null, \"name\": \"CP08/IN/1900069\", \"source\": \"SUPP\", \"last_updated_by\": \"admin\", \"partner\": \"00066\", \"last_updated_on\": \"2019-05-20 07:37:21\", \"move_type\": \"direct\", \"__sign\": \"216a2c9f84b0d24486d28d5ff81610b5ee6c4316\"}"
                },

                {
                    "code": 10,
                    "message": "OK"
                },
                {'code': 10, 'message': 'OK'}
        )
    ])
    @pytest.mark.usefixtures('odoo_account_local_server')
    def ttest_poReceipt_post_check_oddo_response_when_success_then_return_fake_data_done(self, url, payload,fake_odoo_response_data, expected,mocker_odoo_response_with_data):
        mocker_odoo_response_with_data(fake_odoo_response_data)
        rv = self.send_request(url=url, data=payload, method='post')
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)



    @pytest.mark.parametrize(('url', 'payload', 'fake_odoo_response_data', 'expected'), [
        (
                "/api/v2/internals/purchaseOrderReceipt/",
                {
                    "payload": "{\"warehouse_code\": \"CP08\", \"external_ref\": \"NCC190500495\", \"__ts\": \"2019-05-20 07:37:25.768916\", \"scheduled_date\": \"2019-05-20 07:17:20\", \"priority\": \"1\", \"printed\": false, \"backorder\": null, \"owner\": null, \"id\": 293607, \"destination\": \"0801\", \"create_by\": \"admin\", \"external_warehouse\": \"eton\", \"moves\": [{\"code\": \"1402112\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 20.0, \"barcode\": \"1402112\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1402112\", \"qty_done\": 0.0, \"purchase_line_id\": 138511, \"ordered_qty\": 10.0, \"id\": 941010, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 81, \"tax_code\": \"10\"}, {\"code\": \"1201345\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 18.0, \"barcode\": \"1201345\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1201345\", \"qty_done\": 0.0, \"purchase_line_id\": 138512, \"ordered_qty\": 10.0, \"id\": 941011, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 81, \"tax_code\": \"10\"}, {\"code\": \"1600151\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 12.0, \"barcode\": null, \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1600151\", \"qty_done\": 0.0, \"purchase_line_id\": 138513, \"ordered_qty\": 10.0, \"id\": 941012, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 72, \"tax_code\": \"10\"}, {\"code\": \"1600388\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 12.0, \"barcode\": \"1600388\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1600388\", \"qty_done\": 0.0, \"purchase_line_id\": 138514, \"ordered_qty\": 10.0, \"id\": 941013, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 72, \"tax_code\": \"10\"}], \"deadline\": null, \"branch\": \"CP08\", \"create_date\": \"2019-05-20 07:37:21\", \"note\": null, \"related_po_ids\": [54851], \"picking_type\": \"incoming\", \"state\": \"assigned\", \"origin\": \"NCC190500495\", \"contact\": {\"phone\": \"0134567892\", \"name\": \"Administrator\"}, \"is_locked\": true, \"creation_date\": \"2019-05-20 07:17:20\", \"transfer_date\": null, \"name\": \"CP08/IN/1900069\", \"source\": \"SUPP\", \"last_updated_by\": \"admin\", \"partner\": \"00066\", \"last_updated_on\": \"2019-05-20 07:37:21\", \"move_type\": \"direct\", \"__sign\": \"216a2c9f84b0d24486d28d5ff81610b5ee6c4316\"}"
                },

                {
                    'code':'500',
                    'message':"400 Bad Request: Bản ghi không tồn tại hoặc đã bị xóa.",
                    'extra':None
                },
                {
                    'code': '500',
                    'message': "400 Bad Request: Bản ghi không tồn tại hoặc đã bị xóa.",
                    'extra': None
                },
        )
    ])
    @pytest.mark.usefixtures('odoo_account_local_server')
    def ttest_poReceipt_post_check_oddo_response_when_fail_then_return_fake_data_done(self, url, payload,
                                                                                         fake_odoo_response_data,
                                                                                         expected,
                                                                                         mocker_odoo_response_with_data):
        mocker_odoo_response_with_data(fake_odoo_response_data)
        rv = self.send_request(url=url, data=payload, method='post')
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)








    @pytest.mark.parametrize(('url', 'payload', 'fake_odoo_response_data', 'expected'), [
        (
                "/api/v2/internals/purchaseOrderReceipt/1/",
                {
                    "payload": "{\"warehouse_code\": \"CP08\", \"external_ref\": \"NCC190500495\", \"__ts\": \"2019-05-20 07:37:25.768916\", \"scheduled_date\": \"2019-05-20 07:17:20\", \"priority\": \"1\", \"printed\": false, \"backorder\": null, \"owner\": null, \"id\": 293607, \"destination\": \"0801\", \"create_by\": \"admin\", \"external_warehouse\": \"eton\", \"moves\": [{\"code\": \"1402112\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 20.0, \"barcode\": \"1402112\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1402112\", \"qty_done\": 0.0, \"purchase_line_id\": 138511, \"ordered_qty\": 10.0, \"id\": 941010, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 81, \"tax_code\": \"10\"}, {\"code\": \"1201345\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 18.0, \"barcode\": \"1201345\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1201345\", \"qty_done\": 0.0, \"purchase_line_id\": 138512, \"ordered_qty\": 10.0, \"id\": 941011, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 81, \"tax_code\": \"10\"}, {\"code\": \"1600151\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 12.0, \"barcode\": null, \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1600151\", \"qty_done\": 0.0, \"purchase_line_id\": 138513, \"ordered_qty\": 10.0, \"id\": 941012, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 72, \"tax_code\": \"10\"}, {\"code\": \"1600388\", \"source_location\": \"SUPP\", \"tk_warranty_period\": 12.0, \"barcode\": \"1600388\", \"product_uom_qty\": 10.0, \"note\": null, \"product_type\": \"product\", \"state\": \"assigned\", \"sku\": \"1600388\", \"qty_done\": 0.0, \"purchase_line_id\": 138514, \"ordered_qty\": 10.0, \"id\": 941013, \"tax\": 10.0, \"company\": \"39164\", \"account_expense\": \"15611\", \"dest_location\": \"0801\", \"product_qty\": 10.0, \"uom\": 72, \"tax_code\": \"10\"}], \"deadline\": null, \"branch\": \"CP08\", \"create_date\": \"2019-05-20 07:37:21\", \"note\": null, \"related_po_ids\": [54851], \"picking_type\": \"incoming\", \"state\": \"assigned\", \"origin\": \"NCC190500495\", \"contact\": {\"phone\": \"0134567892\", \"name\": \"Administrator\"}, \"is_locked\": true, \"creation_date\": \"2019-05-20 07:17:20\", \"transfer_date\": null, \"name\": \"CP08/IN/1900069\", \"source\": \"SUPP\", \"last_updated_by\": \"admin\", \"partner\": \"00066\", \"last_updated_on\": \"2019-05-20 07:37:21\", \"move_type\": \"direct\", \"__sign\": \"216a2c9f84b0d24486d28d5ff81610b5ee6c4316\"}"
                },

                {
                    "code": 10,
                    "message": "OK"
                },
                {'code': 10, 'message': 'OK'}
        )
    ])

    def test_poReceipt_put_check_oddo_response_when_success_then_return_fake_data_done(self, url, payload,fake_odoo_response_data, expected,mocker_odoo_response_with_data):
        mocker_odoo_response_with_data(fake_odoo_response_data)
        rv = self.send_request(url=url, data=payload, method='post')
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/purchaseOrderReceipt/1/",
                {
                    "payload":"{\"note\": null, \"picking_type\": \"incoming\", \"related_po_states\": {\"50406\": \"done\"}, \"transfer_date\": \"2019-05-13 09:37:13\", \"last_updated_on\": \"2019-05-13 09:37:11\", \"printed\": false, \"external_warehouse\": \"\", \"destination\": \"000001\", \"moves\": [{\"account_expense\": \"15611\", \"product_type\": \"product\", \"purchase_line_id\": 128929, \"note\": null, \"product_qty\": 5.0, \"code\": \"1702288\", \"barcode\": \"1702288\", \"state\": \"done\", \"ordered_qty\": 5.0, \"qty_done\": 5.0, \"product_uom_qty\": 5.0, \"tk_warranty_period\": 36.0, \"dest_location\": \"000001\", \"company\": \"39164\", \"tax\": 10.0, \"source_location\": \"SUPP\", \"uom\": 81, \"tax_code\": \"10\", \"sku\": \"1702288\", \"id\": 837395}], \"priority\": \"1\", \"__ts\": \"2019-05-13 09:37:14.450272\", \"backorder\": null, \"origin\": \"NCC181202700\", \"creation_date\": \"2018-12-12 03:30:04\", \"scheduled_date\": \"2018-12-13 03:30:04\", \"create_date\": \"2018-12-12 04:05:19\", \"is_locked\": true, \"name\": \"CH0000/IN/22547\", \"__login\": \"admin\", \"create_by\": \"huong.ttc@phongvu.vn\", \"move_type\": \"direct\", \"owner\": null, \"last_updated_by\": \"admin\", \"partner\": \"75917\", \"state\": \"done\", \"source\": \"SUPP\", \"related_po_ids\": [50406], \"deadline\": null, \"id\": 257017, \"__sign\": \"c37672dfc8fd2b0bcfbe85d727d33b042f1c2bf5\"}"
                },
                {'code':'500', 'message':"400 Bad Request: Bản ghi không tồn tại hoặc đã bị xóa.",'extra':None}
        )
    ])
    def ttest_poReceipt_put_fail(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='put')
        assert rv.status_code == 500
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/accountInvoice/",
                {
                    "payload": "{\"user\": \"admin\", \"type\": \"in_invoice\", \"partner\": \"115221\", \"reference\": null, \"origin\": \"NCC190500466\", \"sale_order\": null, \"refund_invoice\": null, \"__ts\": \"2019-05-15 08:04:11.032281\", \"id\": 54670, \"purchase_orders\": [\"NCC190500466\"], \"__sign\": \"80932204eeb5bc3f428aafa8986c1e92f949c4e1\"}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def ttest_accInvoice_post_success(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='post')
        assert rv.status_code == 200
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/accountInvoice/",
                {
                    "payload": "{\"__ts\": \"2018-12-31 07:16:48.128069\", \"origin\": \"NCC181205985\", \"type\": \"in_invoice\", \"id\": 51534, \"sale_order\": null, \"partner\": \"00119\", \"user\": \"admin\", \"purchase_orders\": [\"NCC181205985\"], \"reference\": null, \"refund_invoice\": null, \"__sign\": \"b2abe06cad969f987c33c395725d22ae744c01eb\"}"
                },
                {'data': None, 'message': 'Traceback (most recent call last):\n  File "/data/srm/odoo/service/wsgi_server.py", line 124, in wsgi_xmlrpc\n    result = odoo.http.dispatch_rpc(service, method, params)\n  File "/data/srm/odoo/http.py", line 118, in dispatch_rpc\n    result = dispatch(method, params)\n  File "/data/srm/odoo/service/model.py", line 39, in dispatch\n    res = fn(db, uid, *params)\n  File "/data/srm/odoo/service/model.py", line 153, in execute_kw\n    return execute(db, uid, obj, method, *args, **kw or {})\n  File "/data/srm/odoo/service/model.py", line 97, in wrapper\n    return f(dbname, *args, **kwargs)\n  File "/data/srm/odoo/service/model.py", line 160, in execute\n    res = execute_cr(cr, uid, obj, method, *args, **kw)\n  File "/data/srm/odoo/service/model.py", line 149, in execute_cr\n    return odoo.api.call_kw(recs, method, args, kw)\n  File "/data/srm/odoo/api.py", line 687, in call_kw\n    return call_kw_model(method, model, args, kwargs)\n  File "/data/srm/odoo/api.py", line 672, in call_kw_model\n    result = method(recs, *args, **kwargs)\n  File "/data/srm/teko_addons/srm_purchase_ext/models/account_invoice.py", line 67, in api_on_wms_invoice_created\n    return self._handle_wms_in_invoice_created(id, payload)\n  File "/data/srm/teko_addons/srm_purchase_ext/models/account_invoice.py", line 88, in _handle_wms_in_invoice_created\n    raise ValidationError(\'Related PO not existed.\')\nodoo.exceptions.ValidationError: (\'Related PO not existed.\', None)\n', 'code': 1}
        )
    ])
    def ttest_accInvoice_post_fail_done(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='post')
        assert rv.status_code == 500
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/purchaseOrderInvoice/1/",
                {
                    "payload": "{\"id\": 54852, \"__ts\": \"2019-05-21 04:42:54.094255\", \"status\": \"to invoice\", \"name\": \"NCC190500496\", \"__origin_id\": 54852, \"__origin_model\": \"purchase.order\", \"sync_seq\": null, \"__seq_num\": 2, \"__sign\": \"da5d9994a7bd576a15980188c0122ded169e0acd\"}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def ttest_poInvoice_put_success(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='put')
        assert rv.status_code == 200
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/purchaseOrderInvoice/1/",
                {
                    "payload": "{\"id\": 51328, \"__ts\": \"2019-05-21 02:59:36.965157\", \"status\": \"to invoice\", \"name\": \"NCC181203606\", \"__origin_id\": 51328, \"__origin_model\": \"purchase.order\", \"sync_seq\": null, \"__seq_num\": 1, \"__sign\": \"bd0e0cbe2a403a97256d99b9d23ff768d59ab23c\"}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def ttest_poInvoice_put_fail(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='put')
        assert rv.status_code == 500
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/stockPickingType/",
                {
                    "payload": "{\"__ts\": \"2019-03-26 06:53:39.959767\", \"__data\": [{\"count_picking_waiting\": 0, \"sequence_id__data\": {\"code\": false, \"__id\": 730, \"name\": \"Kho ĐĐKD 91 - Tầng 1, số 1 Thái Hà, HNSequence ST out\", \"date_range_ids\": [], \"implementation\": \"standard\", \"company_id\": 1, \"suffix\": false, \"number_next_actual\": 1, \"use_date_range\": false, \"active\": true, \"display_name\": \"Kho ĐĐKD 91 - Tầng 1, số 1 Thái Hà, HNSequence ST out\", \"number_increment\": 1, \"__login\": \"thanh.tt@teko.vn\", \"prefix\": \"CP091/STO/\", \"number_next\": 1, \"__last_update\": \"2019-03-26 06:53:37\", \"padding\": 5}, \"warehouse_id\": 70, \"__login\": \"thanh.tt@teko.vn\", \"__id\": 751, \"return_picking_type_id\": false, \"last_done_picking\": \"[]\", \"default_location_src_id\": 1183, \"color\": 0, \"count_picking_backorders\": 0, \"count_picking_waiting_future\": 0, \"count_picking_available_today\": 0, \"active\": true, \"rate_picking_backorders\": 0, \"use_create_lots\": false, \"use_existing_lots\": true, \"__last_update\": \"2019-03-26 06:53:37\", \"default_location_dest_id\": 17, \"sequence_id\": 730, \"count_picking_ready\": 0, \"code\": \"internal\", \"count_picking_draft\": 0, \"name\": \"Xuất chuyển kho kiêm nội bộ\", \"sequence\": 581, \"show_operations\": false, \"rate_picking_late\": 0, \"count_picking_waiting_late\": 0, \"barcode_nomenclature_id\": false, \"count_mo_late\": 0, \"count_mo_todo\": 0, \"show_reserved\": true, \"count_picking_available_late\": 0, \"display_name\": \"Kho ĐĐKD 91 - Tầng 1, số 1 Thái Hà, HN: Xuất chuyển kho kiêm nội bộ\", \"count_picking_available_future\": 0, \"count_mo_waiting\": 0, \"count_picking_waiting_today\": 0, \"show_entire_packs\": false, \"count_picking\": 0, \"count_picking_late\": 0}], \"__sign\": \"87459cd6e5a61906149d0a4867453ecd01de71f1\"}"
                },
                {'code': 1, 'message': 'Traceback (most recent call last):\n  File "/data/srm/odoo/service/wsgi_server.py", line 124, in wsgi_xmlrpc\n    result = odoo.http.dispatch_rpc(service, method, params)\n  File "/data/srm/odoo/http.py", line 118, in dispatch_rpc\n    result = dispatch(method, params)\n  File "/data/srm/odoo/service/model.py", line 39, in dispatch\n    res = fn(db, uid, *params)\n  File "/data/srm/odoo/service/model.py", line 153, in execute_kw\n    return execute(db, uid, obj, method, *args, **kw or {})\n  File "/data/srm/odoo/service/model.py", line 97, in wrapper\n    return f(dbname, *args, **kwargs)\n  File "/data/srm/odoo/service/model.py", line 160, in execute\n    res = execute_cr(cr, uid, obj, method, *args, **kw)\n  File "/data/srm/odoo/service/model.py", line 149, in execute_cr\n    return odoo.api.call_kw(recs, method, args, kw)\n  File "/data/srm/odoo/api.py", line 687, in call_kw\n    return call_kw_model(method, model, args, kwargs)\n  File "/data/srm/odoo/api.py", line 672, in call_kw_model\n    result = method(recs, *args, **kwargs)\n  File "<decorator-gen-349>", line 2, in api_create_from_msg\n  File "/data/srm/teko_addons/teko_common/utils.py", line 40, in handle\n    _ret = method(self, *args, **kwargs)\n  File "/data/srm/teko_addons/teko_common/models/base.py", line 203, in api_create_from_msg\n    raise ValidationError("%s #%s already exists." % (self._get_msg_clsname(), _id))\nodoo.exceptions.ValidationError: (\'PickingType #751 already exists.\', None)\n', 'data': None}
        )
    ])
    def ttest_pickType_post_fail_done(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='post')
        assert rv.status_code == 500
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/stockPickingType/",
                {
                    "payload": "{\"__ts\":\"2019-03-26 06:53:39.959767\",\"__data\":[{\"count_picking_waiting\":0,\"sequence_id__data\":{\"code\":false,\"__id\":730,\"name\":\"Kho ĐĐKD 91 - Tầng 1, số 1 Thái Hà, HNSequence ST out\",\"date_range_ids\":[],\"implementation\":\"standard\",\"company_id\":1,\"suffix\":false,\"number_next_actual\":1,\"use_date_range\":false,\"active\":true,\"display_name\":\"Kho ĐĐKD 91 - Tầng 1, số 1 Thái Hà, HNSequence ST out\",\"number_increment\":1,\"__login\":\"thanh.tt@teko.vn\",\"prefix\":\"CP091/STO/\",\"number_next\":1,\"__last_update\":\"2019-03-26 06:53:37\",\"padding\":5},\"warehouse_id\":70,\"__login\":\"thanh.tt@teko.vn\",\"__id\":1001,\"return_picking_type_id\":false,\"last_done_picking\":\"[]\",\"default_location_src_id\":1183,\"color\":0,\"count_picking_backorders\":0,\"count_picking_waiting_future\":0,\"count_picking_available_today\":0,\"active\":true,\"rate_picking_backorders\":0,\"use_create_lots\":false,\"use_existing_lots\":true,\"__last_update\":\"2019-03-26 06:53:37\",\"default_location_dest_id\":17,\"sequence_id\":730,\"count_picking_ready\":0,\"code\":\"internal\",\"count_picking_draft\":0,\"name\":\"Xuất chuyển kho kiêm nội bộ\",\"sequence\":581,\"show_operations\":false,\"rate_picking_late\":0,\"count_picking_waiting_late\":0,\"barcode_nomenclature_id\":false,\"count_mo_late\":0,\"count_mo_todo\":0,\"show_reserved\":true,\"count_picking_available_late\":0,\"display_name\":\"Kho ĐĐKD 91 - Tầng 1, số 1 Thái Hà, HN: Xuất chuyển kho kiêm nội bộ\",\"count_picking_available_future\":0,\"count_mo_waiting\":0,\"count_picking_waiting_today\":0,\"show_entire_packs\":false,\"count_picking\":0,\"count_picking_late\":0}],\"__sign\":\"87459cd6e5a61906149d0a4867453ecd01de71f1\"}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def tttest_pickType_post_sucesss_runOneTimeOnly(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='post')
        assert rv.status_code == 200
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/stockPickingType/1/",
                {
                    "payload": "{\"__ts\": \"2019-05-21 06:58:58.616900\", \"__login\": \"admin\", \"__lang\": \"vi_VN\", \"id\": 390, \"__vals\": {\"use_existing_lots\": true}, \"__sign\": \"e68934bb62dcfe2da3284ca9d32350b79cda0988\"}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def ttest_pickType_put_sucesss_done(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='put')
        assert rv.status_code == 200
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/stockPickingType/1/",
                {
                    "payload": "{\"__lang\": \"vi_VN\", \"id\": 669, \"__vals\": {\"active\": true}, \"__login\": \"admin\", \"__ts\": \"2019-03-31 16:41:45.095390\", \"__sign\": \"fc21845d15931e567b49d93e7aacd0cb8fa21a1d\"}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def ttest_pickType_put_fail(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='put')
        assert rv.status_code == 500
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/stockPickingType/1/",
                {
                    "payload": "{\"id\": 1001}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def tttest_pickType_delete_success_runOneTimeOnly(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='delete')
        assert rv.status_code == 200
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/stockPickingType/1/",
                {
                    "payload": "{\"id\": 1001}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def ttest_pickType_delete_fail(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='delete')
        assert rv.status_code == 500
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/stockTransfer/1/",
                {
                    "payload": "{\"id\": 60445, \"name\": \"T0300004\", \"__login\": \"admin\", \"src_name\": \"T0300037\", \"__ts\": \"2019-05-09 03:58:21.743079\", \"date_done\": false, \"note\": \"bị hủy tự động bởi hệ thống do vượt quá thời gian chờ gửi theo quy định\", \"related_pr_ids\": [31625], \"state\": \"cancel\", \"warehouse_out_id\": \"CP01\", \"external_warehouse\": \"\", \"related_po_id\": false, \"warehouse_in_id\": \"CP02\", \"__sign\": \"754397bd6322d23c37325f2656cd233fd40cd8af\"}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def ttest_stockTransfer_put_success(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='put')
        assert rv.status_code == 200
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
                        reason="Can only test on local, when connecting directly to Odoo")
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/stockTransfer/1/",
                {
                    "payload": "{\"note\": \">> bị hủy tự động bởi hệ thống do vượt quá thời gian chờ gửi theo quy định\", \"state\": \"cancel\", \"src_name\": \"T1201475\", \"warehouse_in_id\": \"CP14\", \"__ts\": \"2019-03-04 04:36:03.467509\", \"name\": \"T1204352\", \"__login\": \"admin\", \"id\": 55701, \"related_po_id\": false, \"date_done\": false, \"warehouse_out_id\": \"CH0000\", \"related_pr_ids\": [29153], \"__sign\": \"3740e701995d8b4f1264b72f2d8992dcbf9c3ae8\"}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def ttest_stockTransfer_put_fail(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='put')
        assert rv.status_code == 500
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    # @pytest.mark.skipif(os.environ.get("ENV_MODE", 'dev') != 'dev',
    #                     reason="Can only test on local, when connecting directly to Odoo")
    # @pytest.mark.parametrize(('url', 'payload', 'expected'), [
    #     (
    #             "/api/v2/internals/product_uom/1/",
    #             {
    #                 "payload": "{\"id\": 84, \"__origin_id\": 84, \"__seq_num\": 3, \"name\": \"TEST-ETON\", \"__vals\": {\"name\": \"TEST-ETON\"}, \"__ts\": \"2019-04-02 06:51:19.812446\", \"__lang\": \"vi_VN\", \"__login\": \"admin\", \"__origin_model\": \"product.uom\", \"__sign\": \"dadeeb67a09ec84bc9fcaf7af96171f501241301\"}"
    #             },
    #             {'code': 0, 'message': 'OK'}
    #     )
    # ])
    # def test_update_product_uom_when_send_odoo_success_then_return_success_response(self, odoo_account_local_server, url, payload, expected):
    #     rv = self.send_request(url=url, data=payload)
    #     assert rv.status_code == 200
    #     res_data = json.loads(rv.data.decode("utf-8"))
    #     assert_that(res_data).is_equal_to(expected)
    #
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/product_uom/1/?use_faker=true&no_cache=true",
                {
                    "payload": "{\"id\": 84, \"__origin_id\": 84, \"__seq_num\": 3, \"name\": \"TEST-ETON\", \"__vals\": {\"name\": \"TEST-ETON\"}, \"__ts\": \"2019-04-02 06:51:19.812446\", \"__lang\": \"vi_VN\", \"__login\": \"admin\", \"__origin_model\": \"product.uom\", \"__sign\": \"dadeeb67a09ec84bc9fcaf7af96171f501241301\"}"
                },
                {'code': 0, 'message': 'OK'}
        )
    ])
    def ttest_update_product_uom_use_faker_data_with_success_response(self, odoo_account_local_server, url, payload, expected):
        rv = self.send_request(url=url, data=payload)
        assert rv.status_code == 200
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    # test product brands
    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
            "/api/v2/internals/brands/",
            {
                "payload": "{\"__seq_num\": 1, \"__ts\": \"2019-04-23 03:58:01.058769\", \"__data\": [{\"name\": \"Quang Test 1\", \"description\": false, \"__login\": \"admin\", \"partner_id\": false, \"__last_update\": \"2019-04-23 03:58:01\", \"code\": \"TH000371\", \"active\": true, \"__id\": 424, \"display_name\": \"[TH000371] Quang Test 1\"}], \"__origin_model\": \"product.brand\", \"__lang\": \"vi_VN\", \"__origin_id\": 424, \"__sign\": \"5386e148b163dc29a696bf7819c9c79cf89c1076\"}"
            },
            {
                "code": 5,
                "data": None,
                "message": "ProductBrand #424 already exists."
            }
        )
    ])
    @pytest.mark.usefixtures('odoo_account_local_server')
    def ttest_post_brands_when_send_odoo_then_return_bad_request_response(self, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='post')
        assert rv.status_code == 400
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)

    @pytest.mark.parametrize(('url', 'payload', 'expected'), [
        (
                "/api/v2/internals/brands/",
                {
                    "payload": "{\"__seq_num\": 1, \"__ts\": \"2019-04-23 03:58:01.058769\", \"__data\": [{\"name\": \"Quang Test 1\", \"description\": false, \"__login\": \"admin\", \"partner_id\": false, \"__last_update\": \"2019-04-23 03:58:01\", \"code\": \"TH000371\", \"active\": true, \"__id\": 424, \"display_name\": \"[TH000371] Quang Test 1\"}], \"__origin_model\": \"product.brand\", \"__lang\": \"vi_VN\", \"__origin_id\": 424, \"__sign\": \"5386e148b163dc29a696bf7819c9c79cf89c1076\"}"
                },
                {
                    "code": 0,
                    "message": "OK"
                }
        )
    ])
    @pytest.mark.usefixtures('odoo_account_local_server')
    @pytest.mark.usefixtures('mocker_patch_odoo_send_request')
    def ttest_post_brands_use_mocker_then_return_success_response(self, url, payload, expected):
        rv = self.send_request(url=url, data=payload, method='post')
        assert rv.status_code == 200
        res_data = json.loads(rv.data.decode("utf-8"))
        assert_that(res_data).is_equal_to(expected)
